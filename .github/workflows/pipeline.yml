# myspace-api CI/CD pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize]

jobs:

  build:
    name: Build
    runs-on: ubuntu-22.04
    timeout-minutes: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'

      - if: ${{ github.ref_name == 'main' }}
        name: Build with Maven Prod Env
        run: mvn -B clean package -DskipTests -P prod

      - if: ${{ github.ref_name == 'develop' }}
        name: Build with Maven Dev Env
        run: mvn -B clean package -DskipTests -P dev

      - name: Upload JAR
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: target/myspace-0.0.1-SNAPSHOT.jar

  tests:
    name: Unit/Integration/E2E Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'

      - name: Execute Tests
        run: mvn -B clean test

  sonar:
    name: Sonar Analysis
    runs-on: ubuntu-22.04
    timeout-minutes: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Sonar analyzing
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B clean verify sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.branch.name=${{ github.ref_name }}

  push-docker-image:
    name: Push Production Docker Image to Docker Hub
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    needs: [build, tests, sonar]
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven Prod Env
        run: mvn -B clean package -DskipTests -P prod

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          pull: true
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest
          cache-to: type=inline
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest
          build-args: PROFILE=prod

  deploy:
    name: Deploy to AWS Elastic Beanstalk
    needs: [build, tests, sonar]
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v2
        with:
          name: artifact

      - if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: true
          application_name: ${{ secrets.AWS_EB_APPLICATION_NAME }}
          environment_name: prod
          version_label: ${{github.SHA}}
          region: ${{ secrets.AWS_REGION_DEPLOYMENT }}
          deployment_package: myspace-0.0.1-SNAPSHOT.jar

      - if: ${{ github.event_name == 'push' && github.ref_name == 'develop' }}
        name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: true
          application_name: ${{ secrets.AWS_EB_APPLICATION_NAME }}
          environment_name: develop
          version_label: ${{github.SHA}}
          region: ${{ secrets.AWS_REGION_DEPLOYMENT }}
          deployment_package: myspace-0.0.1-SNAPSHOT.jar